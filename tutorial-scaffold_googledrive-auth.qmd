The [`googledrive` R package](https://googledrive.tidyverse.org/) is a package that lets R users directly interact with files on GoogleDrive. This can be extremely useful because it lets all members of a team share the same source data file(s) and guarantees that updates to "living" documents are received by all group members the next time they run their R script. This package is technically part of the Tidyverse but is not loaded by running `library(tidyverse)`.

Because this package requires access to an R user's GoogleDrive, you must "authenticate" the `googledrive` package. This essentially tells Google that it is okay if an R package uses your credentials to access and (potentially) modify your Drive content. There are only a few steps to this process but follow along with the below tutorial and we'll get you ready to integrate the Google Drive into your code workflows using the `googledrive` package in no time!

### Prerequisites

To follow along with this tutorial you will need to take the following steps:

- [Download R](https://cran.r-project.org/)

- [Download RStudio](https://www.rstudio.com/products/rstudio/download/)

- Create a Gmail account

Feel free to skip any steps that you have already completed!

### Authorize `googledrive`

{{< include /modules_tutorials/googledrive-auth.qmd >}}

### Find and download a specific file

Now that you've authorized the `googledrive` package, you can start downloading the Google Drive files you need through R! Load the package to get started.

```{r, eval = F}
library(googledrive)
```

Let's say that you want to download a csv file from a folder or shared drive. You can save the URL of that folder/shared drive to a variable. Replace the "your url here" with the actual URL, but keep the quotation marks.

```{r, eval = F}
drive_url <- "your url here"
```

To list all the contents of this folder, we can use the `drive_ls()` function. However, first we need to use the `as_id()` function on `drive_url` in order to extract the folder's unique identifier. Then `drive_ls()` takes the identifier as the `path` argument. You will get a dataframe of the files back as the output. 

An example is shown below in the screenshot. Here, this Google Drive folder contains 4 csv files: `ingredients.csv`, `favorite_soups.csv`, `favorite_fruits.csv` and `favorite_desserts.csv`

```{r, eval = F}
drive_folder <- drive_ls(path = as_id(drive_url))
drive_folder
```

<p align="center">
<img src="images/tutorial_drive-auth/drive-download-0.png" width = "90%" />
</p>

If it has been a while since you've used `googledrive`, it will prompt you to refresh your token. Simply enter the number that corresponds to the correct Google Drive account.

<p align="center">
<img src="images/tutorial_drive-auth/drive-download-1.png" width = "90%" />
</p>

If you only want to list files of a certain type, you can specify this in the `type` argument. And let's say that my folder contains a bunch of csv files, but I only want to download the one named "favorite_desserts.csv". In that case, I can also put a matching string in the `pattern` argument in order to filter down to 1 file.

```{r, eval = F}
drive_folder <- drive_ls(path = as_id(drive_url), 
                         type = "csv", 
                         pattern = "favorite_desserts")
drive_folder
```

<p align="center">
<img src="images/tutorial_drive-auth/drive-download-2.png" width = "90%" />
</p>

Once we've narrowed down to the file we want, we can download it using `drive_download()`. This function takes the file identifier as an argument so we can access it using `drive_folder$id`.

```{r, eval = F}
drive_download(file = drive_folder$id)
```

This will automatically download the file to our working directory. If you want, you can specify a different path to download to. Just put the new file path into the `path` argument, replacing the "your path here", but keep the quotation marks.

```{r, eval = F}
drive_download(file = drive_folder$id, 
               path = "your path here")
```

If you've downloaded the file before, and you want to overwrite it, there's a handy `overwrite` argument that you can set to TRUE. Otherwise the default is FALSE.

```{r, eval = F}
drive_download(file = drive_folder$id, 
               overwrite = T)
```

### Find and download multiple files

If there are multiple files in `drive_folder` and you want to download them all, you can use a loop like so:

```{r, eval = F}
# Download these files
for(file in drive_folder$name){
  # Find file identifier, or ID
  file_id <- drive_folder$id[drive_folder$name == file]
  
  # Download file
  drive_download(file = file_id, 
                 path = "your path here",
                 overwrite = T)
}
```

### Supplementary Information

If you have tried to use `drive_auth` and *did not* check the box indicated above, you need to make the `googledrive` package ask you again. Using `drive_auth` will not (annoyingly) return you to the place it sent you the first time. However, if you run the following code chunk it should give you another chance to check the needed box.

The [`gargle` R package](https://gargle.r-lib.org/) referenced below is required for interacting with Google Application Program Interfaces (APIs). This package does the heavy lifting of secure password and token management and is necessary for the `googledrive` authentication chunk below.

```{r re-auth, eval = F}
googledrive::drive_auth(
  email = gargle::gargle_oauth_email(),
  path = NULL,
  scopes = "https://www.googleapis.com/auth/drive",
  cache = gargle::gargle_oauth_cache(),
  use_oob = gargle::gargle_oob_default(),
  token = NULL)
```

Unfortunately, to use the `googledrive` package you *must* check the box that empowers the package to function as designed. If you're uncomfortable giving the `googledrive` that much power you will need to pivot your workflow away from using GoogleDrive directly. However, NCEAS does offer access to an [internal server called "Aurora"](https://nceas.github.io/scicomp-workshop-collaborative-coding/server.html) where data can be securely saved and shared among group members without special authentication like what `googledrive` requires. Reach out to our team if this seems like a more attractive option for your working group and we can offer training on how to use this powerful tool!
