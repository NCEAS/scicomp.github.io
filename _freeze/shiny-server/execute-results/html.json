{
  "hash": "209e08a86700445aeed42e26a0590f5e",
  "result": {
    "markdown": "---\ntitle: \"Deploying Shiny Apps\"\nengine: knitr\n---\n\n  \nLTER-related Shiny apps can be deployed on our server at: [https://shiny.lternet.edu/](https://shiny.lternet.edu/)\n\nTo deploy your working app, first make sure that all the files live at a GitHub repository. Once our sysadmin Nick Outin has made you an account on the server, you can log in via SSH.\n\n## Log in\n\nFor Mac users, open the Terminal app and type the following command, replacing `<YOUR-USERNAME>` with your own username. \n\n::: {.cell}\n\n```{.bash .cell-code}\nssh <YOUR-USERNAME>@shiny.lternet.edu\n```\n:::\n\n\nWindows users can log in with [PuTTY](https://help.nceas.ucsb.edu/NCEAS/Computing/connecting_to_linux_using_ssh?s[]=putty), using shiny.lternet.edu as the host name. \n\n## Set up proper permissions\n\n### Join `shiny-apps`\n\nA `shiny-apps` user group has been created in this server. Set up the proper permissions for your account by adding yourself to this group with this command. \n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo usermod -aG shiny-apps <YOUR-USERNAME>\n```\n:::\n\n\nTo decipher this command a bit: `sudo` will enable you to run commands as a user with full control and privileges. The `usermod` command is used to modify user account details. The basic syntax is:\n\n::: {.cell}\n\n```{.bash .cell-code}\nusermod [OPTIONS] <YOUR-USERNAME>\n```\n:::\n\n\nThe `-G` option will add the user to a supplementary group. The `-aG` combined options will add the user to the new supplementary group while also leaving them in the other supplementary group(s) they were already a part of.\n\nAs an FYI, the apps on the server will run as the user `shiny`, so `shiny` is also in the `shiny-apps` user group. \n\n### Allow access to your home directory\n\nAdditionally, you need to allow `shiny` access to your user home directory by running:\n\n::: {.cell}\n\n```{.bash .cell-code}\nchmod a+x /home/<YOUR-USERNAME>\n```\n:::\n\n\nThis `chmod` (change mode) command is used to control file permissions. Basic syntax:\n\n::: {.cell}\n\n```{.bash .cell-code}\nchmod [OPTIONS] MODE FILE/DIRECTORY\n```\n:::\n\n\nThere are two \"modes\" that you can use to set permissions: Symbolic and Octal mode. The Symbolic mode uses operators and letters. For example, the `a` option denotes all the owner/groups the file/directory belongs to. The `+` operator grants the permission, and the letter `x` stands for the execute permission. \n\n\n## Tell `git` who you are\n\nNow that your account has the proper permissions, use the `git config` commands to tell `git` who you are.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global user.name \"<YOUR-GITHUB-USERNAME>\"\ngit config --global user.email \"<YOUR-GITHUB-EMAIL>\"\n```\n:::\n\n\nYou can check to see if you entered your details correctly by entering `git config --list`.\n\n## Copy your app to the server\n\nThe easiest way to get all the files for your app to the server is by `git clone`. \n\nIf you like, you can create a folder named \"github\" to store all your future apps. For example, in the screenshot below, I created a \"github\" folder using the `mkdir` command in my home directory.\n\nTo check that the folder was created, I can list all the files/folders in this directory with `ls`. Since I want my app to be inside the \"github\" folder, I used the `cd` command to change my directory. \n\nFinally, `git clone` the GitHub repo that has all the files for your app. Here, I am cloning the [`lterpalettefinder-shiny` repo](https://github.com/lter/lterpalettefinder-shiny) to my local directory on the virtual machine as `lterpalettefinder`.\n\n<img src=\"images/shiny-server/shiny-server-1.png\" align=\"center\" width=\"100%\"/>\n\n## Install necessary dependencies and R packages",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}