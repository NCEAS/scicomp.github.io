{
  "hash": "0f1ecb822394794917a3ec85dcfb9cd9",
  "result": {
    "engine": "knitr",
    "markdown": "Working groups sometimes need to handle user-specific information in their code. For example, if your group stores your data in the cloud (e.g., in Box, in Dropbox, etc.) each user will have a different \"absolute file path\" to the synced version of the data folder on their personal computer. Similarly, groups may find it valuable to use their email address in the code. While you _could_ simply have each group member add their information (file path, email, etc.) and comment out all but one of them when you work in that script, there is a better option: user-specific JSON files!\n\nThe main advantage of this method is that you and your group members <u>do not have to manually change _any user-specific information_ in scripts</u> just because a different person runs them!\n\n### Prerequisites\n\nTo follow along with this tutorial you will need to take the following steps:\n\n- [Download R](https://cran.r-project.org/)\n- [Download RStudio](https://www.rstudio.com/products/rstudio/download/)\n- Install the `jsonlite` R package\n\nFeel free to skip any steps that you have already completed!\n\n### 1. Create the JSON file\n\nFirst, you'll need to use RStudio to create your JSON file by creating a new text file (in the top left of RStudio click \"File\" {{< fa arrow-right >}} \"New File\" {{< fa arrow-right >}} \"Text File\"). In the new text file, add content that looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{\n  \"email\":\"my_email@gmail.com\"\n  \"dropbox_path\":\"path/to/dropbox-sync/for/me\"\n}\n```\n:::\n\n\nReplace the content on the _right_ of the colon with your actual information. If desired, you can add as many other pieces of user-specific information as you'd like! Simply follow the `\"info name\":\"info content\"` format and make sure that each piece of information is on its own line.\n\nOne small note here for when you work with your group: <u>all group members need to use _exactly the same name_ to the left of each colon</u>.\n\nYou'll see later when we show an example of this but you can think of the information on the left of the colon as comparable with a column name. It doesn't matter that the text in the \"rows\" will differ between users as long as the script has a consistent \"column\" in which to look for that text.\n\n----\n\nOnce you have the absolute file paths, open RStudio to the main working directory for your project. At the top left corner, click on File -> New File -> Text File. \n\nType the following lines into the file, except replace `YOUR_ABSOLUTE_PATH` with your path. Keep the quotation marks around the path. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n{\n\"data_path\":\"YOUR_ABSOLUTE_PATH\"\n}\n```\n:::\n\n\nYou can customize the name of this path but make sure everyone in your team have the same name(s)! For example, if `data_path` refers to the folder containing all of the data for the group, then everyone should have a `data_path` in their own respective JSON file pointing to the same data folder. The absolute file path will be unique for each person, though. \n\nIf you have multiple paths, you can save them like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{\n\"raw_data_path\":\"YOUR_ABSOLUTE_PATH\",\n\"tidy_data_path\":\"YOUR_ABSOLUTE_PATH\"\n}\n```\n:::\n\n\nSave this file as `paths.json` in your main working directory. \n\n### Put the JSON file in `gitignore`\n\nNavigate to the `gitignore` file of your project and list `paths.json` as one of the files to ignore. We don't want to push this file to GitHub since everyone's own `paths.json` will look different and you wouldn't want to accidentally overwrite your teammate's custom absolute path!\n\n### Install `jsonlite`\n\nIf you don't have `jsonlite` already, install it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"jsonlite\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n### Copy the desired file paths\n\nFirst, navigate to the folder(s) that contain the files that you and your team most frequently need to access. Copy the absolute path to each needed folder. On Mac, you can right-click and then \"Copy ... as Pathname\" (see below).\n\n<p align=\"center\">\n<img src=\"images/tutorial_jsonlite/jsonlite-1.png\" width = \"90%\" />\n</p>\n\nIf you have multiple paths, feel free to paste them into an empty text file for now.\n\n\n### Access your files in cloud storage\n\nNow whenever you want to access the files for your group, you can load `jsonlite` and run its `read_json()` function. If your path was not saved as `data_path` then in the code below, make sure to replace `data_path` with the actual name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load jsonlite\nlibrary(\"jsonlite\")\n\n# Get the path to your files\npath_to_data <- jsonlite::read_json(\"paths.json\")$data_path\n```\n:::\n\n\nAnd `path_to_data` will contain the path to the folder where all your relevant files live! \n\nIf you combine this path with the [`file.path()` function](https://nceas.github.io/scicomp.github.io/best_practices.html#preserve-file-paths-as-objects-using-file.path) then you'll have a powerful, flexible tool for managing file paths!\n\nFor example, if `example.csv` lives in the folder that `path_to_data` points to, then you **and your team members** can read `example.csv` like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the csv reproducibly\nexample <- read.csv(file = file.path(path_to_data, \"example.csv\"))\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}