{
  "hash": "fcc27b0dfcf73a5e138f8b8a7a02a67b",
  "result": {
    "markdown": "---\ntitle: \"Other Tutorials\"\n---\n\n\nSome of the content that we produce is not as detailed as our full workshops but has a wider scope than the content included in our [Coding Tips](https://nceas.github.io/scicomp.github.io/best_practices.html) suggestions. This information can broadly be defined as \"tutorials\" though their depth and scope can vary significantly depending on the topic being tutorialized. As with our [Coding Tips](https://nceas.github.io/scicomp.github.io/best_practices.html), this page is under constant development so please [post an issue](https://github.com/NCEAS/scicomp.github.io/issues) if you have an idea for a tutorial that you'd like to suggest that we create.\n\n## Using the `googledrive` R Package\n\n\nThe [`googledrive` R package](https://googledrive.tidyverse.org/) is a package that lets R users directly interact with files on GoogleDrive. This can be extremely useful because it lets all members of a team share the same source data file(s) and guarantees that updates to \"living\" documents are received by all group members the next time they run their R script. This package is technically part of the Tidyverse but is not loaded by running `library(tidyverse)`.\n\nBecause this package requires access to an R user's GoogleDrive, you must \"authenticate\" the `googledrive` package. This essentially tells Google that it is okay if an R package uses your credentials to access and (potentially) modify your Drive content. There are only a few steps to this process but follow along with the below tutorial and we'll get you ready to integrate the Google Drive into your code workflows using the `googledrive` package in no time!\n\n### Prerequisites\n\nTo follow along with this tutorial you will need to take the following steps:\n\n- [Download R](https://cran.r-project.org/)\n\n- [Download RStudio](https://www.rstudio.com/products/rstudio/download/)\n\n- Create a Gmail account\n\nFeel free to skip any steps that you have already completed!\n\n### Authorize `googledrive`\n\n\nIn order to connect R with a GoogleDrive, we'll need to authorize `googledrive` to act on our behalf. This only needs to be done once (per computer) so follow along and you'll be building GoogleDrive into your workflows in no time!\n\nFirst, **install the `googledrive` and `httpuv` R packages**. The `googledrive` package's need is self-evident while the `httpuv` package makes the following steps a little easier than `googledrive` makes it alone.\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"googledrive\", \"httpuv\"))\n```\n:::\n\nOnce you've installed the packages we can begin the authentication in R using the `drive_auth` function in the `googledrive` package.\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogledrive::drive_auth(email = \"enter your gmail here!\")\n```\n:::\n\nIf this is your *first time* using `googledrive`, `drive_auth` will kick you to a new tab of your browser (see below for a screen grab of that screen) where you can pick which Gmail you'd like to connect to R.\n\n<p align=\"center\">\n<img src=\"images/tutorial_drive-auth/drive-auth-1.png\" width = \"50%\" />\n</p>\n\n**Click the Gmail you want to use** and you will get a second screen where Google tells you that \"Tidyverse API\" wants access to your Google Account. This message is followed by three checkboxes, the first two are grayed out but the third is unchecked.\n\n<p align=\"center\">\n<img src=\"images/tutorial_drive-auth/drive-auth-2.png\" width = \"50%\" />\n</p>\n\n:::callout-important\n### NOTE\nThis next bit is vitally important so *carefully* read and follow the next instruction!\n:::\n\nIn this screen, **you must check the unchecked box** to be able to use the `googledrive` R package. If you do not check this box all attempts to use `googledrive` functions will get an error that says \"insufficient permissions\".\n\n<p align=\"center\">\n<img src=\"images/tutorial_drive-auth/drive-auth-3.png\" width = \"50%\" />\n</p>\n\nWhile granting access to \"see, edit, create, and \"delete\" all of your Google Drive files\" sounds like a significant security risk, those powers are actually why you're using the `googledrive` package in the first place! You want to be able to download existing Drive files, change them in R on your computer, and then put them back in Google Drive which is exactly what is meant by \"see, edit, create, and delete\".\n\nAlso, this power *only applies to the computer you're currently working on!* Granting access on your work computer allows **only** that computer to access your Drive files. So don't worry about giving access to your Drive to the whole world, that is protected by the same failsafes that you use when you let your computer remember a password to a website you frequent.\n\n*After* you've checked the authorization box, **scroll down and click the \"Continue\" button**.\n\n<p align=\"center\">\n<img src=\"images/tutorial_drive-auth/drive-auth-4.png\" width = \"50%\" />\n</p>\n\nThis should result in a plain text page that tells you to close this window and return to R. If you see this message you are ready to use the `googledrive` package!\n\n<p align=\"center\">\n<img src=\"images/tutorial_drive-auth/drive-auth-5.png\" width = \"75%\" />\n</p>\n\n\n\n### Supplementary Information\n\nIf you have tried to use `drive_auth` and *did not* check the box indicated above, you need to make the `googledrive` package ask you again. Using `drive_auth` will not (annoyingly) return you to the place it sent you the first time. However, if you run the following code chunk it should give you another chance to check the needed box.\n\nThe [`gargle` R package](https://gargle.r-lib.org/) referenced below is required for interacting with Google Application Program Interfaces (APIs). This package does the heavy lifting of secure password and token management and is necessary for the `googledrive` authentication chunk below.\n\n::: {.cell}\n\n```{.r .cell-code}\ngoogledrive::drive_auth(\n  email = gargle::gargle_oauth_email(),\n  path = NULL,\n  scopes = \"https://www.googleapis.com/auth/drive\",\n  cache = gargle::gargle_oauth_cache(),\n  use_oob = gargle::gargle_oob_default(),\n  token = NULL)\n```\n:::\n\n Unfortunately, to use the `googledrive` package you *must* check the box that empowers the package to function as designed. If you're uncomfortable giving the `googledrive` that much power you will need to pivot your workflow away from using GoogleDrive directly. However, NCEAS does offer access to an [internal server called \"Aurora\"](https://nceas.github.io/scicomp-workshop-collaborative-coding/server.html) where data can be securely saved and shared among group members without special authentication like what `googledrive` requires. Reach out to our team if this seems like a more attractive option for your working group and we can offer training on how to use this powerful tool!\n\n\n\n## Building a Website with Quarto\n\n\n[Quarto](https://quarto.org/) is a new tool developed by RStudio (the company, not the program) to create a more 'what you see is what you get' editor for creating markdown files and products (e.g., books, websites, etc.). Additionally, it includes a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. While Quarto is still in its infancy, it is rapidly gathering a following due to the aforementioned visual editor and for the ease with which quarto documents and websites can be created.\n\n### Prerequisites\n\nTo follow along with this tutorial you will need to take the following steps:\n\n- [Download R](https://cran.r-project.org/)\n\n- [Download RStudio](https://www.rstudio.com/products/rstudio/download/)\n\n- [Download Quarto](https://quarto.org/docs/get-started/)\n\n- [Install `git`](https://happygitwithr.com/install-git.html)\n\n- [Create a GitHub Account](https://github.com/)\n\n- [Connect `git` to GitHub](https://njlyon0.github.io/asm-2022_github-workshop/setup.html#connecting-programs)\n\nFeel free to skip any steps that you have already completed!\n\n### Create a Quarto Website R Project\n\nTo begin, **click the \"Project\" button** in the top right of your RStudio session.\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-proj-1.png\" width = \"100%\" />\n\nIn the resulting dialogue, **click the \"New Directory\" option.**\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-proj-2.png\" width = \"60%\" />\n</p>\n\nFrom the list of options for project templates, **select \"Quarto Website\".**\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-proj-3.png\" width = \"60%\" />\n</p>\n\n**Pick a title** and **check the \"Create a git repository\" checkbox.** For your title, short but descriptive titles are most effective. Once that is done, click **\"Create Project\"** in the bottom right of the window.\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-proj-4.png\" width = \"60%\" />\n</p>\n\nAfter a few seconds, RStudio should refresh with a Quarto document (such documents have the file extension \".qmd\") and a \"_quarto.yml\" file open.\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-proj-5.png\" width = \"75%\" />\n</p>\n\nPart of Quarto's central philosophy is that all of the formatting of individual .qmd files in a project is governed by the settings created by a singular .yml file. In an R markdown project some of the global settings are set in .yml but other settings are handled within each .Rmd file. This centralization is a key innovation in streamlining projects and is one reason for Quarto's quick popularity.\n\n\n\n### Preparing Project for Web Deployment\n\n\nTo prepare your project for web deployment via GitHub Pages, we have **three** quick steps that we must first complete.\n\n*First*, in the \"_quarto.yml\" file, **add `output-dir: docs` as a subheading beneath the `project:` heading.** Make sure that the indentation is the same as the `type: website` but the new line can be either above or below that line.\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_deploy-prep-1.png\" width = \"75%\" />\n</p>\n\n*Second*, **in the \"Terminal\" pane run `touch .nojekyll`.** This creates a file called \".nojekyll\" that is necessary for hosting your website via GitHub Pages. \n\n*Third*, **in the \"Terminal\" pane run `quarto render`.** This processes the template .qmd files you currently have in the repository and prepares them to become actual web pages.\n\nOnce you've done these three things you can move on to creating a GitHub repository so that we can take the necessary steps to having GitHub host your website!\n\n\n\n### Make a New GitHub Repository\n\n\nFrom your GitHub **\"Repositories\"** tab, click the **<span style=\"color:green\"> green </span> \"New\"** button.\n\n<img src=\"images/tutorial_github-modules/new-github-1.png\" width = \"100%\" />\n\n**Add a title** to your repository and **add a description.** Once you've added these two things, scroll down and click the **<span style=\"color:green\"> green </span> \"Create repository\" button.**\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/new-github-2.png\" width = \"60%\" />\n</p>\nBe sure that you **do not add a README**, **do not add a gitignore**, and **do not add a license.** Adding any of these three will cause a merge conflict when we link the project that you just created with the GitHub repository that you are in the process of creating.\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/new-github-3.png\" width = \"60%\" />\n</p>\n\nAfter a few seconds you should be placed on your new repository's landing page which will look like the below image because there isn't anything in your repository (yet).\n\nCopy the link in the field and go back to your RStudio session.\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/new-github-4.png\" width = \"100%\" />\n</p>\n\n\n\n### Adding your Project to GitHub\n\n\nThe following steps include a sequence of command line operations that will be relayed in code chunks below. **Unless otherwise stated, all of the following code should be run in \"Terminal\".**\n\nIf you didn't check the \"Create a git repository\" button while creating the R project, you'll need to do that via the command line now. **If you did check that box, you should skip this step!**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start a git repository on the \"main\" branch\ngit init -b main\n```\n:::\n\n**Stage all of the files in your project to the git repository.** This includes the .yml file, all .qmd files and all of their rendered versions created when you ran `quarto render` earlier. This code is equivalent to checking the box for the files in the \"Git\" pane of RStudio.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stage all files\ngit add .\n```\n:::\n\nOnce everything has been staged, **you now must commit those staged files** with a message.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Commit all files with the message in quotes\ngit commit -m \"Initial commit\"\n```\n:::\n\nNow that your project files have been committed, you need to **tell your computer where you will be pushing to and pulling from.** Paste the link you copied at the end of the \"Make a New GitHub Repository\" into the code shown in the chunk below (inside of the `[...]`) and run it.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tell your computer which GitHub repository to connect to\ngit remote add origin [GITHUB_URL]\n```\n:::\n\n**Verify that URL** before continuing.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Confirm that URL worked\ngit remote -v\n```\n:::\n\nFinally, **push your commited changes** to the repostory that you set as the remote in the preceding two steps.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Push all of the content to the main branch\ngit push -u origin main\n```\n:::\n\nNow, **go back to GitHub** and refresh the page to see your project content safe and sound in your new GitHub repository!\n\n<img src=\"images/tutorial_github-modules/git-github-connect-1.png\" width = \"100%\" />\n\n\n\n### Deploy Website via GitHub\n\n\nIn order to get your new website actually on the web, we'll need to tell GitHub that we want our website to be accessible at a .github.io URL.\n\nTo do this, **go to the \"Settings\" tab** with a gear icon and click it. You may be prompted to re-enter your GitHub password, do so and you can proceed.\n\n<img src=\"images/tutorial_github-modules/github-deploy-1.png\" width = \"100%\" />\n\nIn the resulting page, look towards the bottom of the left sidebar of settings categories and **click the \"Pages\" option.** This is at the very bottom of the sidebar in the screen capture below but is towards the middle of all of the settings categories Github offers you.\n\n<img src=\"images/tutorial_github-modules/github-deploy-2.png\" width = \"100%\" />\n\nScroll down to the middle of this page and where it says \"Branch\" **click the dropdown menu that says \"None\" by default.**\n\n<img src=\"images/tutorial_github-modules/github-deploy-3.png\" width = \"100%\" />\n\n**Select \"main\"** from the dropdown.\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/github-deploy-4.png\" width = \"60%\" />\n</p>\n\nThis opens up a new dropdown menu where you can select which folder in your repository contains your website's content (it defaults to \"/ (root)\"). Because we specified `output-dir: docs` in the .yml file earlier we can **select \"/docs\" from the dropdown menu.**\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/github-deploy-5.png\" width = \"60%\" />\n</p>\n\nOnce you've told GitHub that you want a website generated from the \"docs\" folder on the main branch, **click the \"Save\" button.**\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/github-deploy-6.png\" width = \"75%\" />\n</p>\n\nFrom this moment your website has begun being deployed by GitHub! You can check the status of the building process by **navigating to the \"Actions\" tab of your repository.**\n\n**Select the \"pages build and deployment workflow\"** in the list of workflows on the bottom righthand side of the page.\n\n<img src=\"images/tutorial_github-modules/github-deploy-7.png\" width = \"100%\" />\n\nThis **shows you GitHub's building and deployment process as a flowchart.** While it is working on each step there will be an **<span style=\"color:orange\">amber</span>** circle next to the name of that sub-task. When a sub-task is completed, the **<span style=\"color:orange\">amber</span>** circle becomes a **<span style=\"color:green\">green</span>** circle with a check mark.\n\n<img src=\"images/tutorial_github-modules/github-deploy-8.png\" width = \"100%\" />\n\nWhen the three steps are complete the **<span style=\"color:orange\">amber</span>** clock symbol next to the \"pages build and deployment\" action will turn into a larger **<span style=\"color:green\">green</span>** circle with a check mark. This is GitHub's way of telling you that your website is live and accessible to anyone on the internet.\n\n<img src=\"images/tutorial_github-modules/github-deploy-9.png\" width = \"100%\" />\n\nYou can now visit your website by visiting its dedicated URL. **This URL can be found by returning to the \"Settings\" tab and then scrolling through the sidebar to the \"Pages\" section.**\n\nAlternately, the website for your repository always uses the following composition: *https://**<span style=\"color:blue\">repository owner</span>**.github.io/**<span style=\"color:purple\">repository name</span>**/*\n\n<img src=\"images/tutorial_github-modules/github-deploy-10.png\" width = \"100%\" />\n\nIf we visit that link, we can see that our website is live!\n\n<img src=\"images/tutorial_github-modules/github-deploy-11.png\" width = \"100%\" />\n\n#### GitHub Housekeeping\n\nWe recommend a quick housekeeping step now to make it easier to find this URL in the future. **Copy the URL from the Pages setting area and return to the \"Code\" tab of the repository**.\n\nOnce there, **click the small gear icon to the right of the \"About\" header.**\n\n<img src=\"images/tutorial_github-modules/github-tidy-1.png\" width = \"100%\" />\n\nIn the resulting window, **paste the copied URL into the \"Website\" field.** Once you've pasted it in, **click the** **<span style=\"color:green\">green</span>** **\"Save changes\" button.**\n\n<p align=\"center\">\n<img src=\"images/tutorial_github-modules/github-tidy-2.png\" width = \"60%\" />\n</p>\n\nThis places the link to your deployed website in an intuitive, easy-to-find location both for interested third parties and yourself in the future.\n\n<img src=\"images/tutorial_github-modules/github-tidy-3.png\" width = \"100%\" />\n\n\n\n### Adding Website Content\n\n\nNow that you have a live website you can build whatever you'd like! Given the wide range of possibility, we'll only cover how to add a new page but the same process applies to any edit to the living webpage.\n\nTo add a new page **create a new Quarto document.** You can do this by going to the \"File\" menu, entering the \"New File\" options, and selecting \"Quarto Document...\"\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-1.png\" width = \"60%\" />\n</p>\n\nSimilarly to an R markdown file, this will open a new window that lets you enter a title and author as well as decide what format you want to render files to along with some other settings options. **You only need to click the \"Create\" button** in the bottom right of this dialogue (though you can definitely play with the other options and text boxes as you desire).\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-2.png\" width = \"75%\" />\n</p>\n\nAfter a moment, a new .qmd file will open in Quarto's visual editor. **For the purposes of this tutorial, you only need to add a `title` in the top of the file** but for a real website you can add whatever content sparks joy for you!\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-3.png\" width = \"75%\" />\n</p>\n\n**Save that file into your project folder.** Its name can be anything but be sure that you remember what you name it!\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-4.png\" width = \"60%\" />\n</p>\n\n**Add the name of the new Quarto document to the .yml file** in the website navbar area (in this example the file is called \"more-stuff.qmd\").\n\n<p align=\"center\">\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-5.png\" width = \"75%\" />\n</p>\n\nOnce you've added the file to the fundamental architecture of your website, you need to tell Quarto to re-build the part of the website that GitHub looks for when it deploys. To do this **run `quarto render` in the Terminal.**\n\nIf you want to *preview* your changes, run `quarto preview` in the Terminal and a new browser window will be displayed showing your current website content. This preview continues until you click the **<span style=\"color:red\">red</span>** stop sign icon in RStudio so be sure to end it when you're done with the preview!\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-6.png\" width = \"100%\" />\n\nRegardless, once you've run either `quarto render` or `quarto preview` **you need to stage and commit all changed files indicated in the Git pane of RStudio**. As a reminder, to stage files you check the box next to them, to commit staged files, type an informative message and press the \"Commit\" button in the right side of the window.\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-7.png\" width = \"100%\" />\n\nSwitch back to GitHub and you'll see an **<span style=\"color:orange\">amber</span>** dot next to the commit hash just beneath and to the left of the **<span style=\"color:green\">green</span>** \"Code\" button.\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-8.png\" width = \"100%\" />\n\nWhen the **<span style=\"color:orange\">amber</span>** dot turns into a **<span style=\"color:green\">green</span>** check mark that means that your edits to your website are now included in the live version of your site!\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-9.png\" width = \"100%\" />\n\nWhen you visit your website you may need to refresh the page for your edits to appear but all new visitors will see the updated content when they load the page.\n\n<img src=\"images/tutorial_quarto-website/website-tutorial_new-content-10.png\" width = \"100%\" />\n\n\n\n### Supplementary Information\n\nQuarto is developing at a rapid pace so quality of life changes and new functionalities are introduced relatively frequently. Additionally, Quarto supports user-created \"extensions\" that can be downloaded in a given project and then used (similar to the way user-developed R packages can be shared) so if you want to do something that Quarto itself doesn't support, chances are you'll be able to find an extension that handles it.\n\n[Quarto's documentation of website creation and formatting](https://quarto.org/docs/websites/) is extremely thorough and is a great resource as you become more comfortable with your new website. We hope this tutorial was useful to you and welcome constructively critical feedback! Please [post an issue](https://github.com/NCEAS/scicomptasks/issues) with any thoughts for improvement that you have.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}